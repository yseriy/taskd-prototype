// Code generated by MockGen. DO NOT EDIT.
// Source: taskd/internal/transport/rabbitmq/rabbitmq.go

// Package rabbitmq is a generated GoMock package.
package rabbitmq

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
	reflect "reflect"
)

// Mockconnection is a mock of connection interface
type Mockconnection struct {
	ctrl     *gomock.Controller
	recorder *MockconnectionMockRecorder
}

// MockconnectionMockRecorder is the mock recorder for Mockconnection
type MockconnectionMockRecorder struct {
	mock *Mockconnection
}

// NewMockconnection creates a new mock instance
func NewMockconnection(ctrl *gomock.Controller) *Mockconnection {
	mock := &Mockconnection{ctrl: ctrl}
	mock.recorder = &MockconnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockconnection) EXPECT() *MockconnectionMockRecorder {
	return m.recorder
}

// Channel mocks base method
func (m *Mockconnection) Channel() (channel, error) {
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel
func (mr *MockconnectionMockRecorder) Channel() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*Mockconnection)(nil).Channel))
}

// Mockchannel is a mock of channel interface
type Mockchannel struct {
	ctrl     *gomock.Controller
	recorder *MockchannelMockRecorder
}

// MockchannelMockRecorder is the mock recorder for Mockchannel
type MockchannelMockRecorder struct {
	mock *Mockchannel
}

// NewMockchannel creates a new mock instance
func NewMockchannel(ctrl *gomock.Controller) *Mockchannel {
	mock := &Mockchannel{ctrl: ctrl}
	mock.recorder = &MockchannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockchannel) EXPECT() *MockchannelMockRecorder {
	return m.recorder
}

// QueueDeclare mocks base method
func (m *Mockchannel) QueueDeclare(name string, durable, autoDelete, exclusive, noWait bool, args amqp.Table) (amqp.Queue, error) {
	ret := m.ctrl.Call(m, "QueueDeclare", name, durable, autoDelete, exclusive, noWait, args)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeclare indicates an expected call of QueueDeclare
func (mr *MockchannelMockRecorder) QueueDeclare(name, durable, autoDelete, exclusive, noWait, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*Mockchannel)(nil).QueueDeclare), name, durable, autoDelete, exclusive, noWait, args)
}

// Publish mocks base method
func (m *Mockchannel) Publish(exchange, key string, mandatory, immediate bool, msg amqp.Publishing) error {
	ret := m.ctrl.Call(m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockchannelMockRecorder) Publish(exchange, key, mandatory, immediate, msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*Mockchannel)(nil).Publish), exchange, key, mandatory, immediate, msg)
}

// Consume mocks base method
func (m *Mockchannel) Consume(queue, consumer string, autoAck, exclusive, noLocal, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	ret := m.ctrl.Call(m, "Consume", queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (mr *MockchannelMockRecorder) Consume(queue, consumer, autoAck, exclusive, noLocal, noWait, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*Mockchannel)(nil).Consume), queue, consumer, autoAck, exclusive, noLocal, noWait, args)
}

// Mockcloser is a mock of closer interface
type Mockcloser struct {
	ctrl     *gomock.Controller
	recorder *MockcloserMockRecorder
}

// MockcloserMockRecorder is the mock recorder for Mockcloser
type MockcloserMockRecorder struct {
	mock *Mockcloser
}

// NewMockcloser creates a new mock instance
func NewMockcloser(ctrl *gomock.Controller) *Mockcloser {
	mock := &Mockcloser{ctrl: ctrl}
	mock.recorder = &MockcloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockcloser) EXPECT() *MockcloserMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *Mockcloser) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockcloserMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockcloser)(nil).Close))
}

// MockamqpConnection is a mock of amqpConnection interface
type MockamqpConnection struct {
	ctrl     *gomock.Controller
	recorder *MockamqpConnectionMockRecorder
}

// MockamqpConnectionMockRecorder is the mock recorder for MockamqpConnection
type MockamqpConnectionMockRecorder struct {
	mock *MockamqpConnection
}

// NewMockamqpConnection creates a new mock instance
func NewMockamqpConnection(ctrl *gomock.Controller) *MockamqpConnection {
	mock := &MockamqpConnection{ctrl: ctrl}
	mock.recorder = &MockamqpConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockamqpConnection) EXPECT() *MockamqpConnectionMockRecorder {
	return m.recorder
}

// Channel mocks base method
func (m *MockamqpConnection) Channel() (amqpChannel, error) {
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(amqpChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel
func (mr *MockamqpConnectionMockRecorder) Channel() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockamqpConnection)(nil).Channel))
}

// Close mocks base method
func (m *MockamqpConnection) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockamqpConnectionMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockamqpConnection)(nil).Close))
}

// MockamqpChannel is a mock of amqpChannel interface
type MockamqpChannel struct {
	ctrl     *gomock.Controller
	recorder *MockamqpChannelMockRecorder
}

// MockamqpChannelMockRecorder is the mock recorder for MockamqpChannel
type MockamqpChannelMockRecorder struct {
	mock *MockamqpChannel
}

// NewMockamqpChannel creates a new mock instance
func NewMockamqpChannel(ctrl *gomock.Controller) *MockamqpChannel {
	mock := &MockamqpChannel{ctrl: ctrl}
	mock.recorder = &MockamqpChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockamqpChannel) EXPECT() *MockamqpChannelMockRecorder {
	return m.recorder
}

// QueueDeclare mocks base method
func (m *MockamqpChannel) QueueDeclare(name string, durable, autoDelete, exclusive, noWait bool, args amqp.Table) (amqp.Queue, error) {
	ret := m.ctrl.Call(m, "QueueDeclare", name, durable, autoDelete, exclusive, noWait, args)
	ret0, _ := ret[0].(amqp.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeclare indicates an expected call of QueueDeclare
func (mr *MockamqpChannelMockRecorder) QueueDeclare(name, durable, autoDelete, exclusive, noWait, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockamqpChannel)(nil).QueueDeclare), name, durable, autoDelete, exclusive, noWait, args)
}

// Publish mocks base method
func (m *MockamqpChannel) Publish(exchange, key string, mandatory, immediate bool, msg amqp.Publishing) error {
	ret := m.ctrl.Call(m, "Publish", exchange, key, mandatory, immediate, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockamqpChannelMockRecorder) Publish(exchange, key, mandatory, immediate, msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockamqpChannel)(nil).Publish), exchange, key, mandatory, immediate, msg)
}

// Consume mocks base method
func (m *MockamqpChannel) Consume(queue, consumer string, autoAck, exclusive, noLocal, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	ret := m.ctrl.Call(m, "Consume", queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (mr *MockamqpChannelMockRecorder) Consume(queue, consumer, autoAck, exclusive, noLocal, noWait, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockamqpChannel)(nil).Consume), queue, consumer, autoAck, exclusive, noLocal, noWait, args)
}

// Close mocks base method
func (m *MockamqpChannel) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockamqpChannelMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockamqpChannel)(nil).Close))
}
